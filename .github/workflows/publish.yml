name: Publish

on:
  # Run on push events on primary branches
  push:
    branches:
      - main
    paths:
      - 'streamlit_dsfr/**'

  # Run on pull request events
  pull_request:

  # Run on manual triggers
  workflow_dispatch:

# Set GITHUB_TOKEN permissions
permissions:
  contents: read

# Allow one concurrent deployment
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:

  # Build job
  build:
    name: Build Astro site artifact
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build for production
      run: docker compose -f docker-compose.yml -f docker-compose.cicd.yml build

    - name: Copy application files
      run: docker compose -f docker-compose.yml -f docker-compose.cicd.yml run --rm app

    - name: Upload dist folder
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: ./streamlit_dsfr/dist
        if-no-files-found: error

  # Release job
  release:
    name: Release version
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Dependencies
    needs:
      - build

    # Set deployment environment
    environment:
      name: release
      url: ${{ steps.release.outputs.url }}

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dist

    - name: Infer next version
      id: tag
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 1,
          })
          const nextTag = releases.length === 0 ? 'v0.0.0' : releases[0].tag_name
          const nextVersion = nextTag.replace(/^v/, '').split('.').map(n => parseInt(n, 10))
          nextVersion[2] += 1
          return `v${nextVersion.join('.')}`

    - name: Create release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.result }}
        files: ./dist/*
        fail_on_unmatched_files: true
        generate_release_notes: true
