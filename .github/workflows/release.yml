name: Release

on:
  # Run on push events on primary branches
  push:
    branches:
      - main

  # Run on manual triggers
  workflow_dispatch:

# Set GITHUB_TOKEN permissions for the workflow
permissions:
  contents: read

# Allow one concurrent deployment per ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Build job
  build:
    name: Build Astro site artifact
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Set outputs
    outputs:
      version: ${{ env.VERSION }}

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Get version tag from VERSION file
      # Read the VERSION file
      # If the file exists, set the version tag and ensure the tag name starts with 'v'
      # Else, do not set the version tag (empty string)
      run: |
        VERSION=$(cat ./app/app/VERSION 2>/dev/null || echo '')
        if [ -n "$VERSION" ]; then
          VERSION="v${VERSION##v}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check if version tag exists
      id: release-exists
      # Run this step only if the version tag is set
      if: env.VERSION != ''
      uses: actions/github-script@v7
      env:
        VERSION: ${{ env.VERSION }}
      with:
        script: |
          try {
            const { data: releases } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.VERSION,
            });
            return 'true';
          } catch (error) {
            if (error.status === 404) {
              return 'false';
            } else {
              throw error;
            }
          }
        result-encoding: string

    # If the version tag already exists, build a dev version
    # Otherwise, build a release or pre-release

    - name: Add dev version suffix to version tag
      id: dev-version
      # Run this step only if the version tag is not set or already exists
      if: |
        env.VERSION == '' ||
        steps.release-exists.outputs.result == 'true'
      # Use the current version tag
      # If set, increase the patch version (to give the new version a higher precedence)
      # If not set, use the default version tag
      # Append the short commit hash as local version suffix
      env:
        VERSION: ${{ env.VERSION }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        if [ -n "$VERSION" ]; then
          VERSION=$(awk -F. '{$NF = $NF + 1;} 1' OFS=. <<< "${VERSION##v}")
        else
          VERSION='0.0.0'
        fi
        echo "VERSION=v${VERSION}+${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Update VERSION file
      # Run this step only if the version tag was modified
      if: steps.dev-version.conclusion == 'success'
      # Remove the leading character in the version tag, which is `v`
      env:
        VERSION: ${{ env.VERSION }}
      run: echo ${VERSION##v} > ./app/app/VERSION

    - name: Build for production
      run: docker compose -f docker-compose.yml -f docker-compose.cicd.yml build

    - name: Copy application files
      run: docker compose -f docker-compose.yml -f docker-compose.cicd.yml run --rm app

    - name: Upload dist folder
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: ./app/dist
        if-no-files-found: error

  # Release job
  release:
    name: Release version
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Dependencies
    needs:
      - build

    # Set GITHUB_TOKEN permissions for this job
    permissions:
      contents: write

    # Set deployment environment
    environment:
      name: release
      url: ${{ steps.release.outputs.url }}

    # Set environment variables
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: ./dist

    - name: Infer if a release should be created
      id: infer-release
      # PEP 440 specifies that:
      # - releases have suffixes such as: `1.0.0`
      # - pre-releases have suffixes such as: `1.0.0a1`, `1.0.0b2`, `1.0.0rc1`, `1.0.0.dev1`, `1.0.0.post1`
      # - pre-releases may also use `.`, `-`, or `_` as separator before the pre-release suffix
      # - dev local versions have suffixes such as: `1.0.0+foo`, `1.0.0+foo.bar`
      # Consider:
      # - Create a release if the version is a release
      # - Create a pre-release if the version is a pre-release
      # - Do not create a release if the version is a dev local version
      # Ignore the leading character in the version tag, which is `v`
      env:
        VERSION: ${{ env.VERSION }}
      run: |
        VERSION=${VERSION:1}
        if ( echo $VERSION | grep -q '[+]' ); then
          # Dev local version
          echo "result=dev" >> $GITHUB_OUTPUT
        elif ( echo $VERSION | grep -q '[a-zA-Z_-]' ); then
          # Pre-release
          echo "result=prerelease" >> $GITHUB_OUTPUT
        else
          # Release
          echo "result=release" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      id: release
      # Run this step only if a release should be created
      if: |
        steps.infer-release.outputs.result == 'release' ||
        steps.infer-release.outputs.result == 'prerelease'
      uses: softprops/action-gh-release@v1
      with:
        # Use the version tag
        tag_name: ${{ env.VERSION }}
        # Set if the release is a pre-release
        prerelease: ${{ steps.infer-release.outputs.result == 'prerelease' }}
        target_commitish: ${{ github.sha }}
        files: ./dist/*
        fail_on_unmatched_files: true
        generate_release_notes: true
